#include <Arduino.h>

/*
  Soil Moisture Meter
  soil_meter.ino
  Measures percentage of moisture in soil
  Uses Capacitive sensor
  Requires calibration values

  DroneBot Workshop 2022
  https://dronebotworkshop.com
*/

#if defined(ARDUINO_RASPBERRY_PI_PICO)
  #include <SI7021.h>
#elif defined(ARDUINO_ESP32_DEV)
  #include "Adafruit_Si7021.h"
#endif

// Include required libraries
#include <Wire.h>
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"
#if defined(ARDUINO_RASPBERRY_PI_PICO)
  #define PIN_LED 21 //GP21 or Pin 22
  #include <SI7021.h>
  SI7021 sensor;
#elif defined(ARDUINO_ESP32_DEV)
  #define PIN_LED 21 //GP21 or Pin 22
  #include "Adafruit_Si7021.h"
  Adafruit_Si7021 sensor = Adafruit_Si7021();
#endif

// Set OLED size in pixels
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Set OLED parameters
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


// Sensor constants - replace with values from calibration sketch

// Constant for dry sensor
const int DryValue = 3000;

// Constant for wet sensor
const int WetValue = 1150;

// Variables for soil moisture
int soilMoistureValue;
int soilMoisturePercent;

float temperature;
float humidity;

int SENSOR_IN = A0; //GP26 or Pin 31

#define MANUAL_BUTTON 20

#define RELAY_OUT 22

#define AUX_POWER 15
// Pump Status Text
String pump_status_text = "OFF";
bool pumpStatus = false;
bool pumpAutoMode = false;
// Variable for pump trigger
int pump_trigger = 30;
bool manualPumpButtonState = false;
bool lastButtonState = false;
int lastDebounceTime = 0;

void pumpOn() {
  // if (digitalRead(AUX_POWER == HIGH)) {
    // Turn pump on
    digitalWrite(RELAY_OUT, HIGH);
    digitalWrite(ONBOARD_LED_PIN, HIGH);
    pump_status_text = "ON";
    pumpStatus = true;
  // }
}
 
void pumpOff() {
  // Turn pump off
  digitalWrite(RELAY_OUT, LOW);
  digitalWrite(ONBOARD_LED_PIN, LOW);
  pump_status_text = "OFF";
  pumpStatus = false;
}

void onButtonPress() {
  int buttonState = digitalRead(MANUAL_BUTTON);

  if (buttonState != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > 500) {
    if (buttonState == HIGH) {
      if (!manualPumpButtonState) {
        Serial.println("Manual Pump Button Pressed");
      }
      manualPumpButtonState = true;
    } else {
      if (manualPumpButtonState) {
        Serial.println("Manual Pump Button Released");
      }
      manualPumpButtonState = false;
    }
  }
  Serial.println("Button State: " + String(buttonState));
  lastButtonState = buttonState;
}

void setup()
{

  // Setup Serial Monitor
  Serial.begin(9600);
  Serial.println("Starting...");

  // Initialize I2C display using 3.3-volts from VCC directly
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  display.clearDisplay();
  Serial.println("Display Started");

  // Set ADC to use 12 bits
  analogReadResolution(12);

  pinMode(SENSOR_IN, INPUT);
  pinMode(ONBOARD_LED_PIN, OUTPUT);
  pinMode(MANUAL_BUTTON, INPUT_PULLDOWN);
  pinMode(RELAY_OUT, OUTPUT);
  pinMode(AUX_POWER, INPUT_PULLDOWN);

  // Initialize temp/hum sensor
  sensor.begin();
  Serial.println("Sensor Started");

  // attachInterrupt(digitalPinToInterrupt(MANUAL_BUTTON), onButtonPress, CHANGE);
}

void printOLED(int top_cursor, String top_text, int main_cursor, String main_text) {
  // Prints to OLED and holds display for delay_time
  display.setCursor(top_cursor, 0);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.println(top_text);
 
  display.setCursor(main_cursor, 20);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print(main_text);
  display.display();
 
  // delay(delay_time);
  display.clearDisplay();
}

// Function to print to OLED
void updateDisplay() {
  int secondsToDisplay = 5;

  int currentSeconds = (millis() / 1000) % 19;
  if (currentSeconds >= secondsToDisplay * 3) {
    // Pump Status
    printOLED(10, "Pump", 10, pump_status_text);
  } else if (currentSeconds >= secondsToDisplay * 2) {
    // Temperature
    printOLED(10, "Temp", 10, String(temperature) + ((char)247) + " F");
  } else if (currentSeconds >= secondsToDisplay) {
    // Humidity
    printOLED(10, "Humidity", 10, String(humidity) + "%");
  } else if (currentSeconds >= 0) {
    // Moisture
    printOLED(10, "Moisture", 10, String(soilMoisturePercent) + "%");
  }
}

void loop() {

  // Get temperature and humidity
  temperature = sensor.readTemperature();
  // temperature = sensor.getFahrenheitHundredths() / 100;
  humidity = sensor.readHumidity();
  // humidity = sensor.getHumidityPercent();
  Serial.print(temperature);
  Serial.println("Â° F");
  Serial.print(humidity);
  Serial.println("%");
  
  // Get soil mositure value
  soilMoistureValue = analogRead(SENSOR_IN);

  // Print to serial monitor
  Serial.print(soilMoistureValue);
  Serial.print(" - ");

  // Determine soil moisture percentage value
  soilMoisturePercent = map(soilMoistureValue, DryValue, WetValue, 0, 100);

  // Keep values between 0 and 100
  soilMoisturePercent = constrain(soilMoisturePercent, 0, 100);

  // Print to serial monitor
  Serial.println(soilMoisturePercent);

  onButtonPress();

  // See if pump should be triggered
  // See if moisture is below or equal to threshold
  if (pumpStatus == false && soilMoisturePercent <= pump_trigger && soilMoisturePercent >= 10) {
    // Turn pump on
    pumpOn();
    pumpAutoMode = true;
  }
  if (pumpStatus == true && soilMoisturePercent >= 50) {
    // Turn pump off
    pumpOff();
    pumpAutoMode = false;
  }
  if (pumpAutoMode == false) {
    if (manualPumpButtonState == true) {
      pumpOn();
    } else {
      pumpOff();
    }
  }

  // Position and print text to OLED
  updateDisplay();

  delay(500);
}
